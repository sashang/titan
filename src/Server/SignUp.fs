module SignUp

open Database
open Domain
open FSharp.Control.Tasks.ContextInsensitive
open Giraffe
open Microsoft.AspNetCore.Http
open Microsoft.AspNetCore.Identity
open Microsoft.Extensions.Logging

let sign_up_user (next : HttpFunc) (ctx : HttpContext) = task {
    //translate the string code generated by Identity into an enum
    let of_code (id_error_code : string) = 
        if id_error_code.Contains "Password" then
            SignUpCode.BadPassword
        else if id_error_code.Contains "User" then
            SignUpCode.BadUsername
        else if id_error_code.Contains "Email" then
            SignUpCode.BadEmail
        else
            SignUpCode.Unknown

    let of_id_errors (errors : seq<IdentityError>) =
        Seq.fold (fun acc (err : IdentityError) ->
                    {SignUpResult.code = List.append acc.code [of_code err.Code]; SignUpResult.message = List.append acc.message [err.Description] })
                    {SignUpResult.code = []; SignUpResult.message = [] } errors

    let! login = ctx.BindJsonAsync<Domain.SignUp>()
    let user = IdentityUser(UserName = login.username, Email = login.email)
    let user_manager = ctx.GetService<UserManager<IdentityUser>>()
    let db_service = ctx.GetService<IDatabase>()
    let! id_result = user_manager.CreateAsync(user, login.password)
    match id_result.Succeeded with
    | false ->
        printfn "Failed to create user"
        return! ctx.WriteJsonAsync (of_id_errors id_result.Errors)
    | true -> 
        return! ctx.WriteJsonAsync {SignUpResult.code = []; SignUpResult.message = []}
}